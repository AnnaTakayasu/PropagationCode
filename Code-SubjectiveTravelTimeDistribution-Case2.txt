'''
Created on 2017/12/20

@author: annan
'''
import numpy as np
import numpy.random as rd
import math
import networkx as nx
import matplotlib.pylab as plt
import time


start=time.time()

def SNMaking(NodeNum,Kmin,Gamma):
    #Config model
    P=[0]
    i=0
    N=0
    Narray=[0]
    pm=1.0
    for i in range(Kmin,NodeNum):
        N+=math.exp(-math.log(i)*Gamma)
    for i in range(Kmin,NodeNum):
        if i==Kmin:
            P[0]=math.exp(-math.log(Kmin)*Gamma)/N
        else:
            p=P[i-Kmin-1]+math.exp(-math.log(i)*Gamma)/N
            P.append(p)
    #print 'P(k)',P

    K0=range(Kmin,NodeNum)
    K=range(Kmin-1,NodeNum)
    for i in range(0,NodeNum):
        random=rd.rand()
        for s in range(Kmin-1,len(P)):
            if random>=P[s]:
                K[i]=K0[s+1]
            elif random<P[Kmin-1]:
                K[i]=K0[Kmin-1]
    K[Kmin-1]+=2
    KSum=sum(K)
    Krem=range(Kmin-1,NodeNum)
    for i in range(0,NodeNum):
        Krem[i]=K[i]

    if KSum % 2 ==1:
        Krem[NodeNum-1]=Krem[NodeNum-1]+1
        K[NodeNum-1]=K[NodeNum-1]+1
        KSum=KSum+1
    Krem0=Krem
    #print 'Ksum',KSum
    t=0
    tmax=100*KSum
    E=range(0,KSum)
    M=0
    LinkConnect=[]
    while KSum>0 and t<tmax:
        Kmax=0
        for i in range(0,NodeNum):
            if Krem[i]>Kmax:
                Kmax=Krem[i]
                vs=i
        ri=rd.randint(low=0,high=KSum-Kmax)
        ve=-1
        Sum=0
        while ri>=Sum:
            ve+=1
            if ve!=vs:
                Sum+=Krem[ve]
        mult=0
        i=0
        while i<M and mult==0:
            if ((E[2*i]==vs and E[2*i+1]==ve) or (E[2*i]==ve and E[2*i+1]==vs)):
                mult=1
            i+=1
        if mult==0:
            E[2*M]=vs
            E[2*M+1]=ve
            KSum-=2
            M+=1
            Krem[vs]-=1
            Krem[ve]-=1
            #print 'vs',vs,'ve',ve
            LinkConnect.append([vs,ve])
        t+=1
    #print LinkConnect

    #Adjacent Matrix
    AdjacentMatrix=np.zeros((NodeNum,NodeNum))
    for i in range(0,M):
        V=LinkConnect[i]
        AdjacentMatrix[V[0],V[1]]=1
        AdjacentMatrix[V[1],V[0]]=1
    #print AdjacentMatrix
    #print 'K',K
    return AdjacentMatrix,K

def AlgebraicConnectivity(AdjacentMatrix,NodeNum):
    AdjacentMatrix=np.array(AdjacentMatrix)
    d=[]
    for j in range(NodeNum):
        onenumber=AdjacentMatrix[:,j]
        onenumber=list(onenumber)
        onenumber=map(int,onenumber)
        onenumber=filter((lambda x: x == 1), onenumber)
        lendiag=len(onenumber)
        d.append(lendiag)
    Diagonal=np.diag(d)
    #print Diagonal

    Lapracian=Diagonal-AdjacentMatrix
    #print Lapracian

    EigenValue, EigenVector = np.linalg.eig(Lapracian)
    EigenValue=list(EigenValue)
    EigenValue.sort()
    #print EigenValue
    lenght=len(EigenValue)
    o=0
    Value=[]
    for o in range(0,lenght):
        EigenValue2=round(EigenValue[o],10)
        Value.append(EigenValue2)
    EigenValue3=filter((lambda x: x > 0.00000000000), Value)
    AlgebraicConnectivity=EigenValue3[0]
    print "Algebraic Connectivity=", AlgebraicConnectivity
    return AlgebraicConnectivity

def HubNode(AdjacentMatrix,K,HubNum):
    #ランダムSNのうち次数の高い上位HubNum数ノードをHubNodeリストにいれる
    HubNode=[]
    K=np.array(K)
    Ksort=K.argsort()[::-1]
    for i in range(0,HubNum):
        HubNode.append(Ksort[i])
    #print 'HubNode',HubNode
    return HubNode


def SubjectiveTravelTimeInitial(NodeNum,RoadNum,Observer,ObsMean,ObsSigma,UnobsMean,UnobsSigma,UnobsMeanMean,UnobsMeanSigma):
    Observe=np.zeros((RoadNum,NodeNum))
    Mean=np.zeros((RoadNum,NodeNum))
    Sigma=np.zeros((RoadNum,NodeNum))
    MeanMean=np.zeros((RoadNum,NodeNum))
    MeanSigma=np.zeros((RoadNum,NodeNum))
    for i in range(len(Observer)):
        o=Observer[i]
        Observe[0,o]=1
    for i in range(NodeNum):
        if Observe[0,i]==1:
            Mean[0,i]=ObsMean
            Sigma[0,i]=ObsSigma
            MeanMean[0,i]=ObsMeanMean
            MeanSigma[0,i]=ObsMeanSigma
        else:
            Mean[0,i]=UnobsMean
            Sigma[0,i]=UnobsSigma
            MeanMean[0,i]=UnobsMeanMean
            MeanSigma[0,i]=UnobsMeanSigma
    #print 'Observe',Observe
    #print "Mean",MeanMean
    #print "Sigma",MeanSigma
    perRMSE0=[]
    for t in range(NodeNum):
        rmse0=(RealTravelTime-float(Mean[0,t]))**2
        perRMSE0.append(rmse0)
    RMSE0=sum(perRMSE0)/len(perRMSE0)
    print 'RMSE0',RMSE0
    return Observe,Mean,Sigma,MeanMean,MeanSigma

def SubjectiveTravelTimeUpdate(K,NodeNum,AdjacentMatrix,HubNode,StepNum,RealTravelTime,Observe,Mean,Sigma,MeanMean,MeanSigma,OthersSigma):
　　#ケース２では使わない
    NewMean=Mean
    NewSigma=Sigma
    NewMeanMean=MeanMean
    NewMeanSigma=MeanSigma
    for i in range(0,StepNum):
        for n in range(0,NodeNum):
            adjacentmatrix=AdjacentMatrix[:,n].tolist()
            Muj=AdjacentMatrix[:,n]*MeanMean[0]
            Muj=Muj.tolist()
            C=Muj.count(0)
            for s in range(C):
                Muj.remove(0)
            AveMuj=sum(Muj)/len(Muj)
            NewMeanMean[0,n]=(OthersSigma/K[n])/(OthersSigma/(K[n])+MeanSigma[0,n])*MeanMean[0,n]+MeanSigma[0,n]/(OthersSigma/(K[n])+MeanSigma[0,n])*AveMuj
            NewMeanSigma[0,n]=((OthersSigma/K[n])*MeanSigma[0,n])/((OthersSigma/K[n])+MeanSigma[0,n])
            NewMean[0,n]=NewMeanMean[0,n]
            NewSigma[0,n]=NewMeanSigma[0,n]+OthersSigma
        Mean=NewMean
        Sigma=NewSigma
        MeanMean=NewMeanMean
        MeanSigma=NewMeanSigma
        print "Mean",Mean
        print "Sigma",Sigma
        perRMSE=[]
        for t in range(NodeNum):
            rmse=(RealTravelTime-float(Mean[0,t]))**2
            perRMSE.append(rmse)
        RMSE=sum(perRMSE)/len(perRMSE)
        print 'RMSE',RMSE

def SubjectiveTravelTimeUpdateHub(K,NodeNum,AdjacentMatrix,HubNode,StepNum,RealTravelTime,Observe,Mean,Sigma,MeanMean,MeanSigma,OthersSigma,HubsSigma):
    #ケース２で使用
    NewMean=Mean
    NewSigma=Sigma
    NewMeanMean=MeanMean
    NewMeanSigma=MeanSigma
    for i in range(0,StepNum):
        #ハブノードからの情報についての更新をHubSigmaを使って行う（式は一緒）
        for n in range(0,NodeNum):
            hubnode=[]
            for t in HubNode:
                if AdjacentMatrix[n,t]==1:
                    hubnode.append(NewMeanMean[0,t])
            if len(hubnode)>0:
                AveHubMuj=sum(hubnode)/len(hubnode)
                NewMeanMean[0,n]=(HubsSigma/len(hubnode))/(HubsSigma/len(hubnode)+MeanSigma[0,n])*MeanMean[0,n]+MeanSigma[0,n]/(HubsSigma/(len(hubnode))+MeanSigma[0,n])*AveHubMuj
                NewMeanSigma[0,n]=((HubsSigma/len(hubnode))*MeanSigma[0,n])/((HubsSigma/len(hubnode))+MeanSigma[0,n])
                NewMean[0,n]=NewMeanMean[0,n]
                NewSigma[0,n]=NewMeanSigma[0,n]+HubsSigma
        Mean=NewMean
        Sigma=NewSigma
        MeanMean=NewMeanMean
        MeanSigma=NewMeanSigma
        #ハブノード以外からの情報について更新（ケース１と同じ）
        for n in range(0,NodeNum):
            meanout=range(NodeNum)
            for p in range(len(HubNode)):
                h=int(HubNode[p])
                meanout.pop(h-p)
            Muj=[]
            for t in meanout:
                if AdjacentMatrix[n,t]==1:
                    Muj.append(MeanMean[0,t])
            if len(Muj)>0:
                AveMuj=sum(Muj)/len(Muj)
                NewMeanMean[0,n]=(OthersSigma/len(Muj))/(OthersSigma/len(Muj)+MeanSigma[0,n])*MeanMean[0,n]+MeanSigma[0,n]/(OthersSigma/(len(Muj))+MeanSigma[0,n])*AveMuj
                NewMeanSigma[0,n]=((OthersSigma/len(Muj))*MeanSigma[0,n])/((OthersSigma/len(Muj))+MeanSigma[0,n])
                NewMean[0,n]=NewMeanMean[0,n]
                NewSigma[0,n]=NewMeanSigma[0,n]+OthersSigma
                Mean=NewMean
        Sigma=NewSigma
        MeanMean=NewMeanMean
        MeanSigma=NewMeanSigma
        perRMSE=[]
        for t in range(NodeNum):
            rmse=(RealTravelTime-float(Mean[0,t]))**2
            perRMSE.append(rmse)
        RMSE=sum(perRMSE)/len(perRMSE)
        print 'RMSE',RMSE
        #print "Mean",Mean
        #print "Sigma",Sigma

if __name__=='__main__':
    ##SN
    NodeNum=100
    Kmin=1
    Gamma=3
    HubNum=5  #Case2

    AdjacentMatrix,K=SNMaking(NodeNum,Kmin,Gamma)
    timeSN=time.time()

    AlgebraicConnectivity=AlgebraicConnectivity(AdjacentMatrix,NodeNum)
    timeAC=time.time()

    HubNode=HubNode(AdjacentMatrix,K,HubNum)  #Case2
    timehub=time.time()


    ##RN
    RoadNum=1
    Observer=[0]

    StepNum=1
    ##Subjective Travel Time Distribution
    RealTravelTime=30.0
    ObsMean=RealTravelTime
    ObsSigma=0.01
    ObsMeanMean=ObsMean
    ObsMeanSigma=0.000001
    UnobsMean=50.0
    UnobsSigma=5.0
    UnobsMeanMean=UnobsMean
    UnobsMeanSigma=5.0
    OthersSigma=1.0
    HubsSigma=0.1

    Observe,Mean,Sigma,MeanMean,MeanSigma=SubjectiveTravelTimeInitial(NodeNum,RoadNum,Observer,ObsMean,ObsSigma,UnobsMean,UnobsSigma,UnobsMeanMean,UnobsMeanSigma)
    timeini=time.time()

    #SubjectiveTravelTimeUpdate(K,NodeNum,AdjacentMatrix,HubNode,StepNum,RealTravelTime,Observe,Mean,Sigma,MeanMean,MeanSigma,OthersSigma) #Case1,3
    timeup=time.time()


    SubjectiveTravelTimeUpdateHub(K,NodeNum,AdjacentMatrix,HubNode,StepNum,RealTravelTime,Observe,Mean,Sigma,MeanMean,MeanSigma,OthersSigma,HubsSigma) #Case2
    timeuphub=time.time()


    end=time.time()
    print '########'
    print 'SN', timeSN-start
    print 'AC',timeAC-timeSN
    print 'Hub',timehub-timeAC
    print 'ini',timeini-timehub
    print 'up',timeup-timeini
    print 'uphub',timeuphub-timeup
    print 'finish', end-start